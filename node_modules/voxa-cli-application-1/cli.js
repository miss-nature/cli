#!/usr/bin/env node

import axios from 'axios';
import { Command } from 'commander';
import Configstore from 'configstore';
import fs from 'fs';
import inquirer from 'inquirer';

const program = new Command();
const config = new Configstore('voxa');

program
    .version('1.0.0')
    .description('A simple CLI application');

program
    .command('init')
    .description('Initialize the CLI by setting up configuration')
    .option('-y, --yes', 'Skip interactive prompts')
    .action(async (options) => {
        if (!options.yes) {
            const answers = await inquirer.prompt([
                {
                    type: 'input',
                    name: 'baseUrl',
                    message: 'Enter the base URL:',
                    default: 'http://localhost:3000/api',
                },
            ]);

            config.set('baseUrl', answers.baseUrl);
        } else {
            // Use default base URL if -y or --yes is provided
            config.set('baseUrl', 'http://localhost:3000/api');
        }

        // Write configuration to a file (voxa.config)
        fs.writeFileSync('voxa.config', JSON.stringify(config.all, null, 2));

        console.log('Initialization complete. Configuration saved to voxa.config.');
        process.exit(0);
    });

program
    .command('greet <name>')
    .description('Greet the user')
    .action((name) => {
        console.log(`Hello, ${name}!`);
        process.chdir('C:\\Users\\Admin\\OneDrive\\Desktop\\WT Prep\\1\\basic');
        process.exit(0);
    });

program
    .command('get <route>')
    .description('Send an HTTP GET request')
    .option('-b, --baseUrl <baseUrl>', 'Specify the base URL')
    .action(async (route, options) => {
        const storedConfig = JSON.parse(fs.readFileSync('voxa.config', 'utf-8'));
        const baseUrl = options.baseUrl || storedConfig.baseUrl || 'http://localhost:3000/api';
        const targetUrl = baseUrl + route;

        try {
            const response = await axios.get(targetUrl);

            console.log('HTTP Status:', response.status);
            console.log('Response Data:', response.data);

            process.exit(0);
        } catch (error) {
            console.error('Error:', error.message);

            if (error.response) {
                console.log('HTTP Status:', error.response.status);
                console.log('Response Data:', error.response.data);
            }

            process.exit(1);
        }
    });

program.parse(process.argv);
